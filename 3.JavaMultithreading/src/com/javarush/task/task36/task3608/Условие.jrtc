taskKey="com.javarush.task.task36.task3608.big09"\n\nMVC (9)

Это последнее задание по MVC.

1. Следуя принципу MVC аналогично реализации предыдущих методов сделай следующее:
напиши логику обновления пользователя. После обновления должен отображаться список пользователей.
Распредели следующие методы по классам MVC:
public void fireEventUserChanged(String name, long id, int level)
public void onUserChange(String name, long id, int level)
public void changeUserData(String name, long id, int level)
где name и level - это новые значения для пользователя с выбранным id.
Примечание: метод, который ты собираешься добавить в Вью нужно добавить в EditUserView.

2. Добавь в main вызов fireEventUserChanged перед вызовом метода fireEventShowDeletedUsers().

3. Добавь в интерфейс Model метод, который ты поместил в Модель, реализуй его в FakeModel: выброси UnsupportedOperationException.


Требования:
1.	Необходимо определить правильное расположение метода fireEventUserChanged(String name, long id, int level) и реализовать этот метод.
2.	Необходимо определить правильное расположение метода onUserChange(String name, long id, int level) и реализовать этот метод.
3.	Необходимо определить правильное расположение метода void changeUserData(String name, long id, int level) и реализовать этот метод.
4.	В методе main необходимо вызвать метод fireEventUserChanged(String, long, int) перед вызовом метода fireEventShowDeletedUsers().
5.	Интерфейс Model должен содержать объявление метода, который ты ранее реализовал в классе MainModel.
6.	В классе FakeModel в теле метода, помещенного в интерфейс Model, необходимо бросить UnsupportedOperationException.


MVC (9)

Это последнее задание по MVC.

1. Следуя принципу MVC аналогично реализации предыдущих методов сделай следующее:
напиши логику обновления пользователя. После обновления должен отображаться список пользователей.
Распредели следующие методы по классам MVC:
public void fireEventUserChanged(String name, long id, int level)
public void onUserChange(String name, long id, int level)
public void changeUserData(String name, long id, int level)
где name и level - это новые значения для пользователя с выбранным id.
Примечание: метод, который ты собираешься добавить в Вью нужно добавить в EditUserView.

2. Добавь в main вызов fireEventUserChanged перед вызовом метода fireEventShowDeletedUsers().

3. Добавь в интерфейс Model метод, который ты поместил в Модель, реализуй его в FakeModel: выброси UnsupportedOperationException.



MVC (9)

Это последнее задание по MVC.

1. Следуя принципу MVC аналогично реализации предыдущих методов сделай следующее:
напиши логику обновления пользователя. После обновления должен отображаться список пользователей.
Распредели следующие методы по классам MVC:
public void fireEventUserChanged(String name, long id, int level)
public void onUserChange(String name, long id, int level)
public void changeUserData(String name, long id, int level)
где name и level - это новые значения для пользователя с выбранным id.
Примечание: метод, который ты собираешься добавить в Вью нужно добавить в EditUserView.

2. Добавь в main вызов fireEventUserChanged перед вызовом метода fireEventShowDeletedUsers().

3. Добавь в интерфейс Model метод, который ты поместил в Модель, реализуй его в FakeModel: выброси UnsupportedOperationException.



MVC (9)

Это последнее задание по MVC.

1. Следуя принципу MVC аналогично реализации предыдущих методов сделай следующее:
напиши логику обновления пользователя. После обновления должен отображаться список пользователей.
Распредели следующие методы по классам MVC:
public void fireEventUserChanged(String name, long id, int level)
public void onUserChange(String name, long id, int level)
public void changeUserData(String name, long id, int level)
где name и level - это новые значения для пользователя с выбранным id.
Примечание: метод, который ты собираешься добавить в Вью нужно добавить в EditUserView.

2. Добавь в main вызов fireEventUserChanged перед вызовом метода fireEventShowDeletedUsers().

3. Добавь в интерфейс Model метод, который ты поместил в Модель, реализуй его в FakeModel: выброси UnsupportedOperationException.



MVC (9)

Это последнее задание по MVC.

1. Следуя принципу MVC аналогично реализации предыдущих методов сделай следующее:
напиши логику обновления пользователя. После обновления должен отображаться список пользователей.
Распредели следующие методы по классам MVC:
public void fireEventUserChanged(String name, long id, int level)
public void onUserChange(String name, long id, int level)
public void changeUserData(String name, long id, int level)
где name и level - это новые значения для пользователя с выбранным id.
Примечание: метод, который ты собираешься добавить в Вью нужно добавить в EditUserView.

2. Добавь в main вызов fireEventUserChanged перед вызовом метода fireEventShowDeletedUsers().

3. Добавь в интерфейс Model метод, который ты поместил в Модель, реализуй его в FakeModel: выброси UnsupportedOperationException.



MVC (9)

Это последнее задание по MVC.

1. Следуя принципу MVC аналогично реализации предыдущих методов сделай следующее:
напиши логику обновления пользователя. После обновления должен отображаться список пользователей.
Распредели следующие методы по классам MVC:
public void fireEventUserChanged(String name, long id, int level)
public void onUserChange(String name, long id, int level)
public void changeUserData(String name, long id, int level)
где name и level - это новые значения для пользователя с выбранным id.
Примечание: метод, который ты собираешься добавить в Вью нужно добавить в EditUserView.

2. Добавь в main вызов fireEventUserChanged перед вызовом метода fireEventShowDeletedUsers().

3. Добавь в интерфейс Model метод, который ты поместил в Модель, реализуй его в FakeModel: выброси UnsupportedOperationException.



